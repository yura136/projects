/* Область видимости переменной (scope) - это часть программы где это переменная определена и доступна
Переменные делятся на глобальные и локальные.
Глобальные - это все переменные объявленные вне каких-либо функций.
Локальные - это переменные объявленные внутри функции. 
Только в JavaScript функции создают локальную область видимости (function scope) */
// Цепочки областей видимости - scope chain

var i = 5; // Глобальная переменная (можно и не объявлять через var, но лучше объявлять)

/* Локальные переменные обязательно объявлять через var, иначе они станут глобальными !!!*/
var func = function() {
	var i = 10; // Локальная переменная, имеет больший приоритет, чем глобальная с тем же именем
	console.log(i);
}; // !!!

func(); // Выведется 10, а не  5

console.log("");
// Вложенные функции - создают цепочки областей видимости (scope chain)
// Первая область видимости - самый высокий приоритет

var func1 = function() {
	var i = 10; // Вторая область видимости
	console.log(i);
	var innerFunc = function() {
		var i = 15;   // Первая область видимости, которую видит интерпретатор
		console.log(i);
	};
	innerFunc(); // Вызвали вложенную функцию, внутри функции
}; // !!!

func1(); // Выведет 10 15

// Подъем (hoisting)
// В JavaScrip интерпретатор знает о всех объявлениях внутри функции
var func2 = function() {
	console.log(t);
	var t = 100;
	/*Аналогично:
	var t;
	console.log(t);   // Вот почему undefined
	t = 100;*/
};

func2(); // Выведет undefined, а не 100, так в начало функции поднимается только объявление переменной, без инициализации