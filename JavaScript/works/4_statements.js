/* ОПЕРАТОРЫ (УНАРНЫЕ, БИНАРНЫЕ)
Операнд (аргумент оператора) - то, к чему применяется оператор. 
5 * 2 - оператор умножения с левым и правыми операндами.
*/

// УНАРНЫЙ оператор - оператор применяется к одному выражению (операнду)
// Унарынй минус
var x = 1;
x = - x;
console.log(x); // -1

// Унарный +, преобразование к числу
console.log("2" + "5"); // 25 - строка
console.log(+"2" + +"5"); // 7 - число

// БИНАРНЫЙ оператор - оператор применяестя к двум операндам
// Бинарный минус
var y = 3, z = 2;
console.log(3 - 2); // 1

var str = "Some " + "string";
console.log(str); // Some string
// Если хоть один аргумент (операнд) является строкой, то второй тоже будет преобразован в строку - ЭТО ТОЛЬКО ДЛЯ БИНАРНОГО +
console.log('5' + 2); // '52'

// Для бинарных / * - все нормально, работают как с числами
console.log("5"/5); // 1
console.log("5" * "5"); // 25
console.log("10" - "8"); // 2

// ПРИОРИТЕТ - порядок выполнения: , = ..... - + / * ун - ун +  (от самого низкого к высокому). Если приоритет одинаков то слева направо (/ *)

// ПРИСВАИВАНИЕ = - оператор с очень низким приоритетом 3
var k = 2 * 2 + 3;
console.log(k); // 7
// Присваивание по цепочке (справо - налево: с = 4, b = c, a = b)
var a,b,c;
a = b = c = 2 + 2; 

// Оператор присваивания (=) возращает значение 
var m = 1;
var n = 3;
var g = 3 + (n = m + 5);
console.log(n); // 6, не 3
console.log(g); // 9

// ВЗЯТИЕ ОСТАТКА (%)
console.log(6 % 4); // 2 - остаток от деления
console.log(-6 % -4); // -2
console.log(-6 % 4); // -2
console.log(6 % 0); // NaN
console.log(6 % "fasd"); // Nan
console.log(6 % Infinity); // 6 
console.log(6.2 % 3.0); // 0.20000000000000018 - ошибка округления
console.log(6.0 % 3.1); // 2.9

// ИНКРЕМЕНТ ++ , ДИКРЕМЕНТ -- (применяется только к переменной, 5++ - это ошибка)
// префиксная форма ++a, возращает новое значение
var i = 2;
console.log(--i); // 1 не 2
i = 2;
console.log(++i); // 3 не 2

// постфиксная форма, возращает старое значение
i = 2;
console.log(i--); // 2 не 1
i = 2;
console.log(i++); // 2 не 3

i = 5;
console.log(5 * ++i); // 30, так приоритет выше у инкремента
i = 5;
console.log(5 * i++); // 25
console.log(i); //6
/* 5 * i = 20   i++ = 6*/


/* Побитовые операторы (ЧИСЛА КАК 32 БИТА(РАЗРЯДА)):
 AND (&), OR (|), XOR (^),  LEFT SHIFT (<<), ROGHT SHIFT (>>), ZERO-FILL RIGHT-SHIFT (>>>)  - все бинарные (6 штук)
NOT (~) (унарный) - 1
 */

 // Сокращенная форма записи
 var x = 10;
 x *= 10; // x = x * 10;
 console.log(x); // 100

 // ОПЕРАТОР ЗАПЯТАЯ - позволяет перечислять выражения, каждое из них вычисляется и отбрасывается, за исключение последнего
 // Вызовем явным образом, скобки так как оператор запятая меньший приоритет чем у опрератора присваинвания
 var a = (5, 6*5, 9*2, 2*5);
 console.log(a); // 10, выведет последнее выражение
